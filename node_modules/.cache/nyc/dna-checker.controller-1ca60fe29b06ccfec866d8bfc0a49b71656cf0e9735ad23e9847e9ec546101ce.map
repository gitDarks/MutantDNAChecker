{"version":3,"file":"/Users/drodr25/Desktop/MutantDNAChecker/src/modules/dna-checker/controllers/dna-checker.controller.ts","sources":["/Users/drodr25/Desktop/MutantDNAChecker/src/modules/dna-checker/controllers/dna-checker.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nucleotide } from \"../models/nucleotide.model\";\nimport { SearchContext } from \"./searching-strategies/context\";\nimport { SearchRightStrategy } from \"./searching-strategies/concrete-strategies/search-right-strategy\";\nimport { SearchRightDownStrategy } from \"./searching-strategies/concrete-strategies/search-rigth-down-strategy\";\nimport { SearchDownStrategy } from \"./searching-strategies/concrete-strategies/search-down-strategy\";\nimport { SearchLeftDownStrategy } from \"./searching-strategies/concrete-strategies/search-left-down-strategy\";\nimport { DNASequencesEntity } from \"../../core/entities/sequence.entity\";\nimport { DnaSequenceService } from \"../services/dna_sequence.service\";\nimport { ConnectionDB } from \"../../core/services/db/db.service\";\nimport { IMutantDNARequestModel } from \"../models/request.model\";\nimport { Request, Response } from \"express\";\n\nexport class DNAChecker {\n  private dnaMatrixFull: Nucleotide[][] = [];\n  private sequenceCounter: number = 0;\n  private context: SearchContext;\n\n  private readonly dnaSequenceService: DnaSequenceService;\n\n  constructor() {\n    this.dnaSequenceService = new DnaSequenceService();\n  }\n\n  private isMutant(dna: string[]): boolean {\n    const size = dna.length;\n    const initTime = new Date().valueOf();\n\n    // Mapeamos el array de entrada en un array 2D para hacer las busquedas en profundidad\n    dNACheckerController.mapDnaMatrix(dna);\n\n    // Verificar secuencia de ADN\n    dNACheckerController.context = new SearchContext(size);\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        /*Realizar comparación con los nucleotidos de la horizontal a la derecha usando la estrategia de\n        busqueda en profundidad, si encuentra una secuencia aumenta el contador de secuencias*/\n        dNACheckerController.context.setStrategy(new SearchRightStrategy());\n        dNACheckerController.sequenceCounter =\n          dNACheckerController.context.search(\n            i,\n            j,\n            dNACheckerController.dnaMatrixFull\n          )\n            ? dNACheckerController.sequenceCounter + 1\n            : dNACheckerController.sequenceCounter;\n\n        /*Realizar comparación con los nucleotidos de la diagonal derecha hacia abajo usando la\n        estrategia de busqueda en profundidad, si encuentra una secuencia aumenta el contador de\n        secuencias*/\n        dNACheckerController.context.setStrategy(new SearchRightDownStrategy());\n        dNACheckerController.sequenceCounter =\n          dNACheckerController.context.search(\n            i,\n            j,\n            dNACheckerController.dnaMatrixFull\n          )\n            ? dNACheckerController.sequenceCounter + 1\n            : dNACheckerController.sequenceCounter;\n\n        /*Realizar comparación con los nucleotidos de la vertical hacia abajo usando la estrategia de\n        busqueda en profundidad, si encuentra una secuencia aumenta el contador de secuencias*/\n        dNACheckerController.context.setStrategy(new SearchDownStrategy());\n        dNACheckerController.sequenceCounter =\n          dNACheckerController.context.search(\n            i,\n            j,\n            dNACheckerController.dnaMatrixFull\n          )\n            ? dNACheckerController.sequenceCounter + 1\n            : dNACheckerController.sequenceCounter;\n\n        /*Realizar comparación con los nucleotidos de la diagonal izquierda hacia abajo usando la\n        estrategia de busqueda en profundidad, si encuentra una secuencia aumenta el contador de\n        secuencias*/\n        dNACheckerController.context.setStrategy(new SearchLeftDownStrategy());\n        dNACheckerController.sequenceCounter =\n          dNACheckerController.context.search(\n            i,\n            j,\n            dNACheckerController.dnaMatrixFull\n          )\n            ? dNACheckerController.sequenceCounter + 1\n            : dNACheckerController.sequenceCounter;\n      }\n    }\n\n    /*no es necesario buscar en otras direcciones puesto que ya toda la matriz fue cubierta\n    Si se encontraron 2 o más secuencias se determina que el DNA es de un mutante*/\n    const isMutantDNA =\n      dNACheckerController.sequenceCounter >= 2 ? true : false;\n\n    const endTime = new Date().valueOf();\n    console.log(\"exec time: \", (endTime - initTime) / 1000);\n    return isMutantDNA;\n  }\n\n  private mapDnaMatrix(dna: string[]) {\n    dNACheckerController.dnaMatrixFull = new Array<Nucleotide[]>();\n    let line: string[] = [];\n\n    dna.forEach((value: string, j: number) => {\n      line = value.split(\"\");\n      const row: Nucleotide[] = new Array<Nucleotide>();\n      line.forEach((nucleotide, i) => {\n        row.push(new Nucleotide(nucleotide));\n      });\n      dNACheckerController.dnaMatrixFull.push(row);\n    });\n  }\n\n  private async saveDNASequence(\n    dna: string,\n    subjectType: string\n  ): Promise<DNASequencesEntity> {\n    try {\n      const dnaEntity = new DNASequencesEntity();\n      dnaEntity.sequence = dna;\n      dnaEntity.subjectType = subjectType;\n\n      const result =\n        await dNACheckerController.dnaSequenceService.saveDNASequence(\n          dnaEntity\n        );\n\n      await ConnectionDB.closeConnection();\n      return result;\n    } catch (e) {\n      console.log(\"saveDNASequence Error: \", e);\n      await ConnectionDB.closeConnection();\n      throw new Error(e);\n    }\n  }\n\n  public checkisMutant(rq: Request, rs: Response) {\n    try {\n      // Leer secuencia de ADN desde el request\n      const request = rq.body as IMutantDNARequestModel;\n      const dnaSequence = request.dna;\n      const isMutant = dNACheckerController.isMutant(dnaSequence);\n      // almacenar en BD\n      dNACheckerController.saveDNASequence(\n        dnaSequence.toString(),\n        isMutant ? \"M\" : \"H\"\n      );\n\n      if (isMutant) {\n        rs.status(200).send(\"200-OK\");\n      } else {\n        rs.status(403).send(\"403-Forbidden\");\n      }\n    } catch (error) {\n      return rs\n        .status(500)\n        .send({ error: error.message || JSON.stringify(error) });\n    }\n  }\n}\n\nconst dNACheckerController = new DNAChecker();\nexport default dNACheckerController;\n"]}