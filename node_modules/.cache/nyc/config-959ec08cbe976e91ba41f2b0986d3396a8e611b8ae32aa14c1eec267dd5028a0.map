{"version":3,"file":"/Users/drodr25/Desktop/MutantDNAChecker/src/config.ts","sources":["/Users/drodr25/Desktop/MutantDNAChecker/src/config.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAiC;AACjC,uCAAyB;AAEzB,IAAI,SAAS,GAA8B,EAAE,CAAC;AAEvC,MAAM,MAAM,GAAG,GAAS,EAAE;IAC/B,MAAM,UAAU,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC;IAClD,IAAI,UAAU,EAAE;QACd,IAAI;YACF,SAAS,GAAG,eAAe,EAAE,CAAC;SAC/B;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,GAAG,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;YAC/C,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SAC9B;KACF;SAAM;QACL,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;KACnD;IACD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC/B,CAAC,CAAA,CAAC;AAbW,QAAA,MAAM,UAajB;AAEF,MAAM,WAAW,GAAG,CAAO,GAAW,EAAmB,EAAE;IACzD,IAAI;QACF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE;YAClC,MAAM,cAAM,EAAE,CAAC;SAChB;QACD,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC;KACvB;IAAC,OAAO,GAAG,EAAE;QACZ,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,GAAG,CAAC,CAAC;QACrC,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;KAC3C;AACH,CAAC,CAAA,CAAC;AAaO,kCAAW;AAXpB,MAAM,eAAe,GAAG,GAAG,EAAE;IAC3B,OAAO;QACL,gBAAgB,EAAE,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,EAAE;QACpD,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,OAAO;QAC5B,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,WAAW;QACpC,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,MAAM;QACtC,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,OAAO;QAC5B,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,OAAO;KAC7B,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import * as dotenv from \"dotenv\";\nimport * as fs from \"fs\";\n\nlet envConfig: { [key: string]: string } = {};\n\nexport const config = async () => {\n  const isInLambda = !!process.env.LAMBDA_TASK_ROOT;\n  if (isInLambda) {\n    try {\n      envConfig = getEnvVariables();\n    } catch (error) {\n      console.log(\"Error reading env vars: \", error);\n      return Promise.reject(error);\n    }\n  } else {\n    envConfig = dotenv.parse(fs.readFileSync(\".env\"));\n  }\n  return Promise.resolve(true);\n};\n\nconst getVariable = async (key: string): Promise<string> => {\n  try {\n    if (!Object.keys(envConfig).length) {\n      await config();\n    }\n    return envConfig[key];\n  } catch (err) {\n    console.log(`config error: %j`, err);\n    throw new Error(\"failed to get variable\");\n  }\n};\n\nconst getEnvVariables = () => {\n  return {\n    DATABASE_TIMEOUT: process.env.DATABASE_TIMEOUT || \"\",\n    DB_HOST: process.env.DB_HOST,\n    DB_PASSWORD: process.env.DB_PASSWORD,\n    DB_PORT: process.env.DB_PORT || \"3306\",\n    DB_USER: process.env.DB_USER,\n    DB_NAME: process.env.DB_NAME,\n  };\n};\n\nexport { getVariable };\n"]}