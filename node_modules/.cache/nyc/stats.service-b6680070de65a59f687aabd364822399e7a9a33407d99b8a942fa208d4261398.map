{"version":3,"file":"/Users/drodr25/Desktop/MutantDNAChecker/src/modules/stats/services/stats.service.ts","sources":["/Users/drodr25/Desktop/MutantDNAChecker/src/modules/stats/services/stats.service.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,kEAAiE;AACjE,yEAAyE;AAEzE,MAAa,YAAY;IACV,0BAA0B,CACrC,WAAmB;;YAEnB,IAAI;gBACF,MAAM,WAAW,GAAG,MAAM,yBAAY,CAAC,cAAc,EAAE,CAAC;gBACxD,aAAa;gBACb,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC,GAAG,MAAM,WAAW,CAAC,OAAO,CAAC,YAAY,CAAC,oCAAkB,EAAE;oBACpF,WAAW;iBACZ,CAAC,CAAC;gBACH,OAAO,KAAK,CAAC;aACd;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,CAAC,GAAG,CAAC,kDAAkD,EAAE,KAAK,CAAC,CAAC;gBACvE,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;aACxB;QACH,CAAC;KAAA;CACF;AAhBD,oCAgBC","sourcesContent":["import { ConnectionDB } from \"../../core/services/db/db.service\";\nimport { DNASequencesEntity } from \"../../core/entities/sequence.entity\";\n\nexport class StatsService {\n  public async countDNASequencesBySubject(\n    subjectType: string\n  ): Promise<number> {\n    try {\n      const queryRunner = await ConnectionDB.getQueryRunner();\n      // @ts-ignore\n      const [sequences, count] = await queryRunner.manager.findAndCount(DNASequencesEntity, {\n        subjectType,\n      });\n      return count;\n    } catch (error) {\n      console.log(\"[ERROR] couting DNA sequences by subject type %o\", error);\n      throw new Error(error);\n    }\n  }\n}\n"]}