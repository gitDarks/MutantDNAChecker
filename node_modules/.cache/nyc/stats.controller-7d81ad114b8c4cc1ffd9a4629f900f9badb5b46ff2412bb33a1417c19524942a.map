{"version":3,"file":"/Users/drodr25/Desktop/MutantDNAChecker/src/modules/stats/controllers/stats.controller.ts","sources":["/Users/drodr25/Desktop/MutantDNAChecker/src/modules/stats/controllers/stats.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,kEAAiE;AACjE,6DAAyD;AAGzD,MAAa,KAAK;IAOhB;QACE,IAAI,CAAC,YAAY,GAAG,IAAI,4BAAY,EAAE,CAAC;IACzC,CAAC;IAEY,QAAQ,CAAC,EAAW,EAAE,EAAY;;YAC7C;;;yFAG6E;YAC7E,IAAI;gBACF,eAAe,CAAC,cAAc;oBAC5B,CAAC,MAAM,eAAe,CAAC,YAAY,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC;wBACpE,CAAC,CAAC;gBACJ,eAAe,CAAC,aAAa;oBAC3B,CAAC,MAAM,eAAe,CAAC,YAAY,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC;wBACpE,CAAC,CAAC;gBACJ,eAAe,CAAC,KAAK;oBACnB,eAAe,CAAC,cAAc,GAAG,CAAC;wBAChC,CAAC,CAAC,eAAe,CAAC,cAAc;4BAC9B,CAAC,eAAe,CAAC,aAAa,GAAG,CAAC;gCAChC,CAAC,CAAC,eAAe,CAAC,aAAa;gCAC/B,CAAC,CAAC,eAAe,CAAC,cAAc,CAAC;wBACrC,CAAC,CAAC,CAAC,CAAC;gBAER,MAAM,yBAAY,CAAC,eAAe,EAAE,CAAC;gBAErC,MAAM,MAAM,GACV,sBAAsB;oBACtB,eAAe,CAAC,cAAc;oBAC9B,uBAAuB;oBACvB,eAAe,CAAC,aAAa;oBAC7B,aAAa;oBACb,eAAe,CAAC,KAAK,CAAC;gBAExB,OAAO,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,CAAC;aACpD;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,yBAAY,CAAC,eAAe,EAAE,CAAC;gBACrC,OAAO,EAAE;qBACN,MAAM,CAAC,GAAG,CAAC;qBACX,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;aAC5D;QACH,CAAC;KAAA;CACF;AAjDD,sBAiDC;AAED,MAAM,eAAe,GAAG,IAAI,KAAK,EAAE,CAAC;AACpC,kBAAe,eAAe,CAAC","sourcesContent":["import { ConnectionDB } from \"../../core/services/db/db.service\";\nimport { StatsService } from \"../services/stats.service\";\nimport { Request, Response } from \"express\";\n\nexport class Stats {\n  private countMutantDna: number;\n  private countHumanDna: number;\n  private ratio: number;\n\n  public statsService: StatsService;\n\n  constructor() {\n    this.statsService = new StatsService();\n  }\n\n  public async getStats(rq: Request, rs: Response) {\n    /* Contar los registros en base de datos de las secuencias de ADN de mutantes y humanos\n    Si la cantidad de mutantes es cero, el ratio es cero\n    Si la cantidad de humanos es cero, el ratio es 1 o la cantidad de mutantes / la cantidad de mutantes\n    de lo contrario el ratio es la cantidad de mutantes/la cantidad de humanos */\n    try {\n      statsController.countMutantDna =\n        (await statsController.statsService.countDNASequencesBySubject(\"M\")) ||\n        0;\n      statsController.countHumanDna =\n        (await statsController.statsService.countDNASequencesBySubject(\"H\")) ||\n        0;\n      statsController.ratio =\n        statsController.countMutantDna > 0\n          ? statsController.countMutantDna /\n            (statsController.countHumanDna > 0\n              ? statsController.countHumanDna\n              : statsController.countMutantDna)\n          : 0;\n\n      await ConnectionDB.closeConnection();\n\n      const result =\n        '\"count_mutant_dna\": ' +\n        statsController.countMutantDna +\n        ', \"count_human_dna\": ' +\n        statsController.countHumanDna +\n        ', \"ratio\": ' +\n        statsController.ratio;\n\n      return rs.status(200).send(\"Stats are: \" + result);\n    } catch (error) {\n      await ConnectionDB.closeConnection();\n      return rs\n        .status(500)\n        .send({ error: error.message || JSON.stringify(error) });\n    }\n  }\n}\n\nconst statsController = new Stats();\nexport default statsController;\n"]}